@inject IPlantRepository PlantRepository
@inject ISownRepository SownRepository

<h3>AddSown</h3>

@code {
    [CascadingParameter]
    BlazoredModalInstance ModalInstance { get; set; }

    [Parameter]
    public string CropId {get;set;}

    public CreateSownDto newSown = new();

    public IEnumerable<PlantDto> Plants { get; set; } = new List<PlantDto>();

    protected override Task OnInitializedAsync()
    {
       
        _ = LoadPlants();
        return base.OnInitializedAsync();
    }

    public async Task LoadPlants() =>Plants =  await PlantRepository.GetAll();    
    
    void Cancel() => ModalInstance.CancelAsync();

    public async Task HandleValidSubmit()
    {
         newSown.CropId = int.Parse(CropId);
        var result = await SownRepository.Create(newSown);        
        if(result)
        {
              await ModalInstance.CloseAsync(ModalResult.Ok("succees"));
        }      
    }
}
