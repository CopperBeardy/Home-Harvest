@page "/crops"
<h3>Crops</h3>
    <DxStackLayout CssClass="w-100 ch-480">    
    <Items>
        <DxStackLayoutItem >
            <Template>
                <DxButton Text="Add Crop" Click="@HandleNewCrop"/>
                
                <DxListBox Data="@CropDtos"
                                    @bind-Values="@Values"                                     
                                    SelectionMode="ListBoxSelectionMode.Single"
                                    ListRenderMode="ListRenderMode.Virtual" 
                                    style="min-height:200px;">
                    <DxListEditorColumn FieldName="LocationYear" Caption="Crop year" />
                 </DxListBox>
                 <p class="demo-text cw-400 mt-2 text-muted">
                     Selected item: <b>@Values.FirstOrDefault()?.LocationYear</b>
                     </p>           
            </Template>
        </DxStackLayoutItem>
         <DxStackLayoutItem Length="2fr">
            <Template>
                @if (IsAddVisible)
                {
                    <AddCrop  onAdd="@ToggleAddVisible" />
                }else
                  {
                         <img src="@Values.FirstOrDefault()?.PlotImage" />  
                }
            </Template>
        </DxStackLayoutItem>
    </Items>
    </DxStackLayout>


@code {
    IEnumerable<CropDto> Values { get; set; }

    [Parameter]
    public IEnumerable<CropDto> CropDtos { get; set; } = new List<CropDto>();
    [Inject]
    public ICropRepository CropRepository { get; set;}

    [Parameter]
    public bool IsAddVisible { get; set; } = false;

    protected override Task OnInitializedAsync()
    {
       _ =  LoadCrops();
       Values = CropDtos.Take(1);
     
        return base.OnInitializedAsync();
    }

    public async Task LoadCrops()
    {
        CropDtos = await CropRepository.GetAll();
        await InvokeAsync(StateHasChanged);
    }

    public async Task HandleNewCrop()
    {
        IsAddVisible = true;
    }
    public async Task ToggleAddVisible(bool visible)
    {
         IsAddVisible = visible;
        await LoadCrops();    
    }
}
